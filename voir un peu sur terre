#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May 14 10:59:52 2021

@author: harry
"""

import numpy as np
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt

import gzip
import glob

import Meteo_terre_traitement as mtt

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor

chunksize=100000
chunks=[]

for chunk in pd.read_csv('/home/harry/Documents/projet_station_meteo/NW_Ground_Stations/Meteo_NW_2016.csv',chunksize=chunksize):
    chunks.append(chunk)

for chunk in pd.read_csv('/home/harry/Documents/projet_station_meteo/NW_Ground_Stations/Meteo_NW_2017.csv',chunksize=chunksize):
    chunks.append(chunk)
 
for chunk in pd.read_csv('/home/harry/Documents/projet_station_meteo/NW_Ground_Stations/Meteo_NW_2018.csv',chunksize=chunksize):
    chunks.append(chunk)


data=pd.concat(chunks, axis=0)
data=data
meteo=mtt.Meteo_Data_View(data, jours=3, var_corbeille=[], cible='direction', vue=2)


dataset=meteo.data_good_shape
cible=meteo.target




X_train, X_test, y_train, y_test=train_test_split(dataset, cible, test_size=0.2, random_state=0)

model=RandomForestClassifier(n_jobs=2, n_estimators=100, random_state=0)
model.fit(X_train, y_train)

print(model.score(X_train, y_train))
print(model.score(X_test, y_test))


def plot_var_importantes(model):
    n_features=dataset.shape[1]
    plt.figure(figsize=[12, 8])
    plt.barh(range(n_features), model.feature_importances_, align='center')
    plt.yticks(np.arange(n_features))
    plt.xlabel('Feature importance')
    plt.ylabel('Feature')
    plt.ylim(-1, n_features)
    
plot_var_importantes(model)

''' calcule la certitude de la pr√©vision'''

probas=model.predict_proba(X_test)
max_liste=[]
for line in probas:
    maximum=np.max(line)
    max_liste.append(maximum)
certitude=np.mean(max_liste)

print(certitude)
